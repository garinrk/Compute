// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
sampler2D input;
float width;
float height;
int sampleSize;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!
	float2 actualPosition = float2((id.x) / width, (id.y) / height);
	float2 actualPixelSize = float2(1.0 / width, 1.0 / height);

	float4 currentPixel = tex2Dlod(input, float4(actualPosition.x, actualPosition.y, 0, 0));

	float4 total = float4(0.0,0.0,0.0,0.0);

	//int sampleSize = 25;
	int halfSample = sampleSize / 2;
	float2 minPos = actualPosition - float2(halfSample * actualPixelSize.x, halfSample * actualPixelSize.y);
	float2 maxPos = actualPosition + float2(halfSample * actualPixelSize.x, halfSample * actualPixelSize.y);

	for (float posX = minPos.x; posX < maxPos.x; posX += actualPixelSize.x) {
		for (float posY = minPos.y; posY < maxPos.y; posY += actualPixelSize.y) {
			total += tex2Dlod(input, float4(posX, posY, 0, 1));
		}
	}


	//0 1 2
	//neighbors += tex2Dlod(input, float4(actualPosition.x - actualPixelSize.x, actualPosition.y + actualPixelSize.y, 0, 0));
	//neighbors += tex2Dlod(input, float4(actualPosition.x, actualPosition.y + actualPixelSize.y, 0, 0));
	//neighbors += tex2Dlod(input, float4(actualPosition.x + actualPixelSize.x, actualPosition.y + actualPixelSize.y, 0, 0));

	////3 5
	//neighbors += tex2Dlod(input, float4(actualPosition.x - actualPixelSize.x, actualPosition.y, 0, 0));
	//neighbors += tex2Dlod(input, float4(actualPosition.x + actualPixelSize.x, actualPosition.y, 0, 0));

	////6 7 8
	//neighbors += tex2Dlod(input, float4(actualPosition.x - actualPixelSize.x, actualPosition.y - actualPixelSize.y, 0, 0));
	//neighbors += tex2Dlod(input, float4(actualPosition.x, actualPosition.y - actualPixelSize.y, 0, 0));
	//neighbors += tex2Dlod(input, float4(actualPosition.x + actualPixelSize.x, actualPosition.y - actualPixelSize.y, 0, 0));

	total /= (sampleSize * sampleSize);

	Result[id.xy] = total;
}
