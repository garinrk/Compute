// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Assets\Compute\NoiseInclude.compute"

#define DIV_289 0.00346020761245674740484429065744f

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
int RandOffset;
RWTexture2D<float4> Result;

//
//
//// Function to linearly interpolate between a0 and a1
//// Weight w should be in the range [0.0, 1.0]
//float lerp(float a0, float a1, float w) {
//	return (1.0f - w)*a0 + w * a1;
//}
//
//// Computes the dot product of the distance and gradient vectors.
//float dotGridGradient(float ix, float iy, float x, float y) {
//
//
//	// Compute the distance vector
//	float dx = x - ix;
//	float dy = y - iy;
//
//	// Compute the dot-product
//	return (dx*gradients2D[ix] + dy * gradients2D[iy]);
//}
//
//// Compute Perlin noise at coordinates x, y
//float perlin(float x, float y) {
//
//	// Determine grid cell coordinates
//	float x0 = floor(x);
//	float x1 = x0 + 1;
//	float y0 = floor(y);
//	float y1 = y0 + 1;
//
//	// Determine interpolation weights
//	// Could also use higher order polynomial/s-curve here
//	float sx = x - x0;
//	float sy = y - y0;
//
//	// Interpolate between grid point gradients
//	float n0, n1, ix0, ix1, value;
//	n0 = dotGridGradient(x0, y0, x, y);
//	n1 = dotGridGradient(x1, y0, x, y);
//	ix0 = lerp(n0, n1, sx);
//	n0 = dotGridGradient(x0, y1, x, y);
//	n1 = dotGridGradient(x1, y1, x, y);
//	ix1 = lerp(n0, n1, sx);
//	value = lerp(ix0, ix1, sy);
//
//	return value;
//}


float4 mod(float4 x, float4 y)
{
  return x - y * floor(x / y);
}

float4 mod289_t(float4 x)
{
  return x - floor(x / 289.0) * 289.0;
}

float4 permute_t(float4 x)
{
  return mod289_t(((x*34.0)+1.0)*x);
}

float4 taylorInvSqrt_t(float4 r)
{
  return (float4)1.79284291400159 - r * 0.85373472095314;
}

float2 fade(float2 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
float cnoise(float2 P)
{
  float4 Pi = floor(P.xyxy) + float4(0.0, 0.0, 1.0, 1.0);
  float4 Pf = frac (P.xyxy) - float4(0.0, 0.0, 1.0, 1.0);
  Pi = mod289(Pi); // To avoid truncation effects in permutation
  float4 ix = Pi.xzxz;
  float4 iy = Pi.yyww;
  float4 fx = Pf.xzxz;
  float4 fy = Pf.yyww;

  float4 i = permute_t(permute_t(ix) + iy);

  float4 gx = frac(i / 41.0) * 2.0 - 1.0 ;
  float4 gy = abs(gx) - 0.5 ;
  float4 tx = floor(gx + 0.5);
  gx = gx - tx;

  float2 g00 = float2(gx.x,gy.x);
  float2 g10 = float2(gx.y,gy.y);
  float2 g01 = float2(gx.z,gy.z);
  float2 g11 = float2(gx.w,gy.w);

  float4 norm = taylorInvSqrt_t(float4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
  g00 *= norm.x;
  g01 *= norm.y;
  g10 *= norm.z;
  g11 *= norm.w;

  float n00 = dot(g00, float2(fx.x, fy.x));
  float n10 = dot(g10, float2(fx.y, fy.y));
  float n01 = dot(g01, float2(fx.z, fy.z));
  float n11 = dot(g11, float2(fx.w, fy.w));

  float2 fade_xy = fade(Pf.xy);
  float2 n_x = lerp(float2(n00, n01), float2(n10, n11), fade_xy.x);
  float n_xy = lerp(n_x.x, n_x.y, fade_xy.y);
  return 2.3 * n_xy;
}



[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	//Result[id.xy] = cnoise(float2(id.x, id.y));
	Result[id.xy] = 0.5f + cnoise(float2(id.x,id.y));
}